MVP: Previsão de Doenças Cardíacas com Machine Learning


## 1. Objetivo do Projeto
Construir uma solução completa que utiliza algoritmos de classificação para prever o risco de doença cardíaca, disponibilizando o modelo através de uma API consumida por uma interface web interativa.

## 2. Visão Geral
Este projeto consiste na criação de uma solução completa de Machine Learning para prever o risco de doenças cardíacas em pacientes com base em dados clínicos. A solução abrange desde a análise e treino do modelo até à sua implementação como uma API de back-end e o consumo por uma aplicação web de front-end.

Este repositório contém todos os artefactos necessários para a avaliação do MVP da Pós-Graduação em Engenharia de Software, incluindo o notebook de treino, a aplicação full stack, os testes automatizados e a documentação.

Tecnologias Utilizadas:

Linguagem: Python 3

Machine Learning: Scikit-Learn, Pandas, NumPy

Back-end: Flask, Flask-CORS

Front-end: HTML5, CSS3, JavaScript (Vanilla)

Testes: PyTest

## 3. Como Executar a Aplicação
Para executar o projeto, é necessário ter o Python 3 e o pip instalados. Siga os passos abaixo, que envolvem executar o back-end e o front-end em terminais separados.

3.1. Executar o Back-end (API)
Navegue até à pasta api:

cd api

Crie e ative um ambiente virtual:

# Criar o ambiente
python -m venv venv

# Ativar no Windows (cmd)
venv\Scripts\activate

# Ativar no macOS/Linux
source venv/bin/activate

Instale as dependências:

pip install -r requirements.txt

Inicie o servidor Flask:

flask run

A API estará a ser executada em http://127.0.0.1:5000. Deixe este terminal aberto.

3.2. Executar o Front-end
A forma mais fácil é usar a extensão Live Server no VS Code.

Abra a pasta front no VS Code.

Clique com o botão direito no ficheiro index.html e selecione "Open with Live Server".

O seu navegador abrirá automaticamente a aplicação.

Agora, pode interagir com o formulário no seu navegador. As requisições serão enviadas para a API em execução e os resultados da previsão serão exibidos na tela.

## 4. O Modelo de Machine Learning
O processo de criação do modelo de Machine Learning está documentado no Notebook_de_Classificação_de_Doenças_Cardíacas_(VS_Code_Colab) (1).ipynb. Este notebook cobre todas as etapas exigidas pela disciplina:

Carga e Análise Exploratória dos Dados.

Pré-processamento com Pipelines e StandardScaler.

Treino e Otimização de Hiperparâmetros com GridSearchCV para os algoritmos KNN, Árvore de Decisão, Naive Bayes e SVM.

Avaliação e Comparação dos modelos para selecionar o melhor.

Exportação do modelo final para o ficheiro heart_disease_model.pkl.

## 5. Testes Automatizados
Para garantir a qualidade e o desempenho do modelo, foi implementado um teste automatizado com PyTest.

Para executar os testes:

Certifique-se de que está no ambiente virtual ativado (venv).

Navegue até à pasta api.

Execute o seguinte comando:

pytest

Os testes irão verificar se o modelo carrega corretamente e se o seu desempenho (acurácia) está acima de um limiar pré-definido, prevenindo a implantação de um modelo com performance inferior.

## 6. Reflexão sobre Desenvolvimento de Software Seguro
Lidar com dados de saúde exige uma atenção redobrada à segurança e à privacidade, conforme as boas práticas de Desenvolvimento de Software Seguro.

Anonimização de Dados:
O dataset utilizado é anónimo, mas num cenário real, os dados dos pacientes seriam altamente sensíveis (PII - Informações de Identificação Pessoal). Antes de qualquer análise ou treino de modelo, seria imperativo aplicar técnicas de anonimização:

Pseudonimização: Substituir identificadores diretos (como nome ou número de segurança social) por um pseudónimo ou um ID aleatório. Isto permite que os dados de um mesmo paciente possam ser ligados sem revelar a sua identidade.

Generalização: Reduzir a granularidade dos dados. Por exemplo, em vez de usar a idade exata (e.g., 53 anos), poderíamos usar uma faixa etária (e.g., 50-59 anos).

Mascaramento: Ocultar partes de um dado, como os primeiros dígitos de um código postal.

Segurança da Aplicação:
Além dos dados, a própria aplicação deve ser segura:

Validação no Back-end: A API deve validar rigorosamente todos os dados recebidos do front-end para garantir que estão no formato e intervalo esperados. Isto previne ataques de injeção e garante a integridade dos dados enviados ao modelo.

Comunicação Segura: Em produção, toda a comunicação entre o front-end e a API deve ser feita sobre HTTPS para encriptar os dados em trânsito.

Controlo de Acesso: A API deveria ser protegida por um sistema de autenticação e autorização para garantir que apenas utilizadores ou sistemas autorizados possam solicitar predições.